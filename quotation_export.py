# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'quotation_v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import xlwings as xw
import sources.parts_list as pl
import os
from datetime import datetime as dt
import sources.logins as lg
import pathlib
import qrcode
from time import sleep
import xlwings as xw
from sqlite3 import connect
from IPython.display import display
import pandas as pd
import sources.create_db as cd

# stdoutOrigin=sys.stdout 
# sys.stdout = open("log.txt", "w")
ver = '1.1.7'
print('----Python Control Quotation---------')
print(f'--------------version {ver}----------------')
conn = connect('quotation.db')

def update_db():
    while True:
        cmd_update = str(input('Update database(y/N):') or 'N')
        if cmd_update.upper() == 'Y' or cmd_update.upper() == 'N':

            break
        else:
            display('Only accept "Y" or "N"')
            print('\n')
    return cmd_update
q='''
        SELECT max([UPDATE TIME]) as [update time],min([rma no.]) as rma_min,
        max([rma no.]) as rma_max FROM consolidated
    '''
update_time = pd.read_sql(q,conn)
display(update_time)

cmd_update = update_db()
# Update or No
a = pl.parts_list()
if cmd_update.upper() =='Y':
    
    db_name = 'quotation.db'
    print('\nSelect SearchResultConsolidated.xls file:')
    file_name = lg.file_select(end_with ='.xls',folder_name = 'files')
    cd.create_db(db_name,file_name,f_type = 'consolidated')
    print('\nUpdate database file from Google Sheet')
    cd.create_db(db_name,f_type = 'database')
else:
    print(f"\nLatest Data was update at {update_time['update time'][0]}")
        

# loop for multiple quotation
esc = True
while esc:

    #Select RMA or SN:
    sn = str(input('Search by Serial or RMA: '))
    if sn.upper().strip() == 'UPDATE':
        pass 
    else:
        q=f'''
                SELECT c.[rma no.] AS rma,c.customer_name,c.serial_no,c.model,c.approval,c.repair_status,c.in_inspect_user_name
                FROM consolidated c
                WHERE upper(c.serial_no) like '%{sn.upper()}%' or  upper(c.[rma no.]) like '%{sn.upper()}%'
                ORDER BY rma DESC
            '''
        results = pd.read_sql(q,conn)
    if len(results)>0:
        display(pd.read_sql(q,conn))
    elif sn.upper().strip() == 'QUIT' or sn.upper().strip() == 'EXIT' or sn.upper().strip() == 'DONE':
        break
    else:
        print(f'\nCan not search with key "{sn}"')
        continue

    #Select Index
    while True:
        try:
            ind = int(input('\nSelect RMA by index (Default 0): ') or 0)
            break
        except:
            print('Only Accept number') 
    for i in range(results.shape[1]):
        print("{0:40} {1}".format(results.columns[i],results.iloc[ind][i]))


    # Confirm RMA
    confirm = str(input(f' Confirm Select RMA"{results.iloc[ind][0]}"? (y/N)') or 'N')
    if confirm.upper() =='Y':
        rma = results.iloc[ind][0]
    else:
        rma=''
        continue


    # Export Excel File
    if rma !='':
        service_fee = 450
        currency = 24882
        q_report={}
        rma_no_part_list=[]
        folder_name = 'quotation_' + dt.now().strftime('%y%m%d')
        image_folder = 'images'
        path = pathlib.Path().absolute()
        try:
            os.mkdir(folder_name)
            print(f'folder {folder_name} was created.')
        except:
            print(f'Folder {folder_name} exists')
         #     create rma
        qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=4,
        border=0.1,
        )
        qr.add_data(rma)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white").convert('RGB')
        img_name = f"{image_folder}\\{rma}.png"
        img.save(img_name)

        try:

            part_list,info,price_add,title = a.create_parts_list(conn,rma,service_fee,currency,folder_name)
            #create quotation
            b = pl.quotation(part_list,info,price_add,title)
           
            qr_top = b.wb.sheets('Parts').range("I7").top
            qr_left = b.wb.sheets('Parts').range("I7").left
            b.wb.sheets('Parts').pictures.add(os.path.join(path,img_name),name='img_name',top = qr_top+5,left = qr_left+22)
        
            b.input_data()
            b.save_and_close()
            q_report.update({rma:(part_list,info,price_add,title)})
        except Exception as e:
            print(e)
            rma_no_part_list.append(rma)
            print('Can not export')
        print(f'Done for {rma}!')
        print('\nType Update or Done to command.')
       
print('End Program in 5s')
sleep(5)
print('--------Done--------')
print('---Thank You!!!---')
